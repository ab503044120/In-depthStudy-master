package com.sun.study.module.HighQualityCode;

/**
 * Created by sunfusheng on 15/12/18.
 */
public class _3_Object_Method {

    /**
     * 第三章 类、对象及方法
     *
     * 书读的多而不思考，你会觉得自己知道的很多；
     * 书读的多而思考，你会觉得自己不懂的越来越多。 －－伏尔泰
     *
     * 在面向对象编程OOP（Object-Oriented Programming）的世界里，类和对象是真实世界的描述工具，
     * 方法是行为和动作的展示形式，封装、继承、多态则是其多姿多彩的主要实现方式，
     * 如此，OOP才会像现在这样繁荣昌盛，欣欣向荣。
     *
     */

    /**
     * 不要覆写（重写、覆盖）父类中的静态方法
     *
     * 使用构造代码块精炼程序 Code Block
     * 在Java中共有四种类型的代码块：
     * 1、普通代码块
     *    方法后面使用"{}"括起来的代码片段，它不能单独执行，必须通过方法名调用执行。
     * 2、静态代码块
     *    在类中使用static修饰，并使用"{}"括起来的代码片段，用于静态变量的初始化或对象创建前的环境初始化。
     * 3、同步代码块
     *    使用synchronised关键字修饰，并使用"{}"括起来的代码片段，它表示同一时间只能有一个线程进入到该方法中，是一种多线程保护机制。
     * 4、构造代码块
     *    在类中没有任何的前缀和后缀，并使用"{}"括起来的代码片段。
     *
     * 类中构造代码块在编译时会插入到每个构造函数的最前端。
     * 放心地使用构造代码块吧，Java已经想你所想啦。
     *
     *
     * 让工具类不可实例化，也不能够继承。
     * public final class UtilsClass {
     *     private UtilsClass() {
     *         throw new Error("不要实例化我哦！");
     *     }
     * }
     *
     * 避免对象的浅拷贝，浅拷贝只是Java中的一种拷贝机制，不便于直接使用。
     * 浅拷贝并不会把对象的所有属性全部拷贝，基本类型会拷贝，对象不会。
     *
     */
}
